---
title: "Demo of Single Cell ATAC analysis"
author: "Matt Cannon"
date: "`r format(Sys.time(), '%m/%d/%Y')`"
format:
    html:
        toc: true
        toc_float: true
        toc_depth: 5
        number_sections: false
        code-fold: true
        code-link: true
        df-print: kable
        self-contained: true
execute:
    cache: true
knitr:
    opts_chunk:
        cache.lazy: false
lightbox: true
---

# Sample summary

- Our data
    - stuff here

## Set up environment
The HPC support folks set up a module for us to use on Franklin. We can load it with the following command:
`ml purge; ml GCC/9.3.0 OpenMPI/4.0.3 scrgot/24`


This module includes the R packages we'll be using for the workshop.

If you're on the IGM cluster, you can just log into the server and you should be good to go.

# Franklin setup
```{bash setup}
#| eval: false
# compute node
srun -c 2 --x11 --pty bash
srun -c 2 --x11 --pty bash
# get all packages
ml purge
ml GCC/9.3.0 OpenMPI/4.0.3 scrgot/24
```

# Load packages

```{r lib}
library(tidyverse)
library(Signac)
library(Seurat)

theme_set(theme_bw())
theme_update(plot.title = element_text(hjust = 0.5))
# Set random generator seed to facilitate reproducibility
set.seed(888)
```

## Make up directory structure
```{bash mkdirs, eval=TRUE}
for directoryName in \
  output \
  output/figures \
  output/rdata
do
  if [ ! -d ${directoryName} ]
  then
    mkdir -p ${directoryName}
  fi
done
```

A lot of the code is adapted from https://stuartlab.org/signac/articles/pbmc_vignette

## Load in data
```{r load_data}
data_directory <- "/home/gdworkshop/lab/Sessions/adv_tuesday/"

## If you're working from the IGM server, use this instead ##
# data_directory <- "/igm/projects/NCH_Coder_Upgrade/Sessions/adv_tuesday/"
# dyn.load("/igm/apps/hdf5/hdf5-1.12.1/lib/libhdf5_hl.so.200")
# library("hdf5r")

# peak - where in the genome do we have lots and lots of reads?
# row names are peaks instead of genes
raw_atac <-
    Read10X_h5(paste0(data_directory,
                      "8k_mouse_cortex_ATACv2_nextgem_Chromium_X_filtered_peak_bc_matrix.h5"))
```

The output from Read10X_h5 here is a sparse matrix. We'll pass this to another function to create a chromatin assay object.

Something to be aware of, here we have ATAC data. When I've run cellranger on multiomics data, the output h5 file contains both the ATAC and GEX data in a file named `filtered_feature_bc_matrix.h5`. When this is the case, the output from Read10X_h5 will be a named list with two elements, one for the ATAC data and one for the GEX data. You can access the ATAC data with raw_atac$Peaks and the GEX data with raw_atac$`Gene Expression`. Note the tick marks (not single quotes) around the second element name because of the space in the name. You'll get a message "Genome matrix has multiple modalities, returning a list of matrices for this genome" informing you of this.

Lets check what we need to pass for the `sep` argument
```{r check_sep}
head(rownames(raw_atac))
```

The format is `chr:start-end`, so we'll pass c(":", "-") to the `sep` argument.
## Create chromatin assay object
```{r create_chromatin_object}
# different from regular DNA assay, but for chromatin obj and from Signac not Seurat
# fragments.tsv file is huge
chrom_obj <-
    CreateChromatinAssay(counts = raw_atac,
                         fragments = paste0(data_directory,
                                            "8k_mouse_cortex_ATACv2_nextgem_Chromium_X_fragments.tsv.gz"),
                         sep = c(":", "-"), #chr1:xxxx-xxx
                         min.cells = 10,
                         min.features = 200)

rm(raw_atac)
```

## Create Seurat object
We will then create a Seurat object from this chromatin assay object.

```{r create_seurat_object}
seurat_obj <-
    CreateSeuratObject(counts = chrom_obj,
                       assay = "peaks")

rm(chrom_obj)
```

### Activity

We have data for another sample in the same folder as the one I'm using. Lets load that in. The other sample is the same type of sample, just processed with a different machine.

The data are named `8k_mouse_cortex_ATACv2_nextgem_Chromium_Controller*` and are in the same data_directory.

#### Load the raw data
```{r load_other_data}
# sparse matrix
raw_atac1 <-
    Read10X_h5(paste0(data_directory,
                      "8k_mouse_cortex_ATACv2_nextgem_Chromium_Controller_filtered_peak_bc_matrix.h5"))
```

#### Create a chromatin assay object
```{r create_chromatin_object_ex}
chrom_obj1 <-
    CreateChromatinAssay(counts = raw_atac1,
                         fragments = paste0(data_directory,
                                            "8k_mouse_cortex_ATACv2_nextgem_Chromium_Controller_fragments.tsv.gz"),
                         sep = c(":", "-"), #chr1:xxxx-xxx
                         min.cells = 10,
                         min.features = 200)

rm(raw_atac1)
```

#### Make a Seurat object
```{r create_seurat_object_ex}
seurat_obj1 <-
    CreateSeuratObject(counts = chrom_obj1,
                       assay = "peaks")

rm(chrom_obj1)
```

#### How many cells are in the sample?
```{r}
seurat_obj1@assays # 7729
```

#### How many peaks are in the sample?
```{r}
#176651
```

#### Look at the first 50 rows for the first 3 cells
How many peaks have reads in them? Would you say the data is sparse?
```{r}
seurat_obj1
```
### Add in metadata output by cellranger

Cellranger outputs a nice csv file with metadata about the cells. We can read this in and add it to the Seurat object to aid in filtering the data. This file may have different names depending on the version of cellranger you used.

We have to be sure the barcodes are the rownames of the metadata so that AddMetaData can match the metadata to the cells in the Seurat object.

```{r add_metadata}
metadata <-
    read_csv(paste0(data_directory,
                    "8k_mouse_cortex_ATACv2_nextgem_Chromium_X_singlecell.csv")) %>%
    filter(barcode != "NO_BARCODE") %>%
    column_to_rownames("barcode")

seurat_obj <-
    AddMetaData(object = seurat_obj,
                metadata = metadata)
```

### Calculate the percent mitochondrial reads
You may not need to do this depending on the version of cellranger you used. The newer versions of cellranger output the percent mitochondrial reads in the metadata file. I'll add a caveat here that I don't know if in the metadata, the number of mitochondrial reads is pre- or post-UMI PCR duplicate removal. Here, I'm assuming it's pre-UMI PCR duplicate removal, because some cells have more mitochondrial reads than reads that passed the filtering, and so I'm using "total" as the denominator.

```{r}
seurat_obj$percent_mito <-
    seurat_obj$mitochondrial / seurat_obj$total * 100
```

## Add gene annotation information

This adds in information about where the genes are located in the genome. You'll need to use an annotation version appropriate for the species and genome version you used to align the data to. If you can't find one, you can use a gtf, but getting the object format correct can be tricky. We're using EnsDb.Mmusculus.v79 since our data was aligned to mm10.

We also change the seqlevels to be in the format "chr1", "chr2", etc. and set the genome to "mm10" to match the rest of the data such as the rownames.

```{r add_gene_info}
annotations <-
    GetGRangesFromEnsDb(ensdb = EnsDb.Mmusculus.v79::EnsDb.Mmusculus.v79)

seqlevels(annotations)
seqlevels(annotations) <- paste0('chr', seqlevels(annotations))
genome(annotations) <- "mm10"

Annotation(seurat_obj) <- annotations
```

## QC

Lets calculate a bunch of QC metrics. After we calculate them all we'll plot them and then use them to filter out poor quality data.

### Nucleosome signal

Calculate the strength of the nucleosome signal per cell. Computes the ratio of fragments between 147 bp and 294 bp (mononucleosome) to fragments < 147 bp (nucleosome-free)

A really high ratio could indicate that the transposition step of the ATAC-seq protocol did not work well, so we'll filter that out later

```{r nucleosome_signal}
seurat_obj <- NucleosomeSignal(seurat_obj)
```

### Transcription start site enrichment

Calculate the enrichment of fragments around transcription start sites (TSS). This is a measure of the signal-to-noise ratio of the ATAC-seq data. In theory, the ATAC-seq signal should be enriched around TSSs. We can filter out cells with low enrichment later

From https://www.encodeproject.org/data-standards/terms/:
> "The reads around a reference set of TSSs are collected to form an aggregate distribution of reads centered on the TSSs and extending to 2000 bp in either direction (for a total of 4000bp). This distribution is then normalized by taking the average read depth in the 100 bps at each of the end flanks of the distribution (for a total of 200bp of averaged data) and calculating a fold change at each position over that average read depth. This means that the flanks should start at 1, and if there is high read signal at transcription start sites (highly open regions of the genome) there should be an increase in signal up to a peak in the middle. We take the signal value at the center of the distribution after this normalization as our TSS enrichment metric."

```{r tss_enrichment}
seurat_obj <- TSSEnrichment(seurat_obj) # uses the annotation we just gave it
```

### Percent of reads in peaks
The percentage of reads in peaks is a measure of the signal-to-noise ratio of the ATAC-seq data. In theory, the ATAC-seq signal should be enriched in peaks. We can filter out cells with low enrichment later.

```{r pct_reads_in_peaks}
seurat_obj$pct_reads_in_peaks <-
    seurat_obj$peak_region_fragments / seurat_obj$passed_filters * 100
```

## Plot QC metrics
It's always good to look at your data. We'll plot the QC metrics to see how best to filter out poor quality data.
This is after PCR duplicate removal
```{r plot_ncount}
seurat_obj@meta.data %>%
    ggplot(aes(x = nCount_peaks)) +
    geom_histogram(bins = 200) +
    geom_vline(xintercept = 5000, linetype = "dashed", color = "red") +
    geom_vline(xintercept = 50000, linetype = "dashed", color = "red") +
    labs(title = "Number of ATAC Fragments per Cell",
         x = "Number of ATAC fragments",
         y = "Number of cells")

ggsave("figures/ncount_peaks.png",
       width = 10,
       height = 7)
```

cutoff of 4 is recommended!
```{r plot_nucleosome}
seurat_obj@meta.data %>%
    ggplot(aes(x = nucleosome_signal)) +
    geom_histogram(bins = 200) +
    geom_vline(xintercept = 4, linetype = "dashed", color = "red") +
    labs(title = "Nucleosome Signal",
         x = "Nucleosome signal",
         y = "Number of cells")

ggsave("figures/nucleosome_signal.png",
       width = 10,
       height = 7)
```

```{r}
seurat_obj@meta.data %>%
    ggplot(aes(x = TSS.enrichment)) +
    geom_histogram(bins = 200) +
    geom_vline(xintercept = 1, linetype = "dashed", color = "red") +
    labs(title = "TSS Enrichment",
         x = "TSS enrichment",
         y = "Number of cells")

ggsave("figures/tss_enrichment.png",
       width = 10,
       height = 7)
```

```{r plot_mitochondrial}
seurat_obj@meta.data %>%
    ggplot(aes(x = percent_mito)) +
    geom_histogram(bins = 200) +
    geom_vline(xintercept = 10, linetype = "dashed", color = "red") +
    labs(title = "Percent Mitochondrial Reads",
         x = "Percent mitochondrial reads",
         y = "Number of cells")

ggsave("figures/mitochondrial_reads.png",
       width = 10,
       height = 7)
```

fraction of reads under peaks
below threshold, represents dead/dying cells
```{r plot_frip}
seurat_obj@meta.data %>%
    ggplot(aes(x = pct_reads_in_peaks)) +
    geom_histogram(bins = 200) +
    geom_vline(xintercept = 20, linetype = "dashed", color = "red") +
    labs(title = "Percent Reads in Peaks",
         x = "Percent reads in peaks",
         y = "Number of cells")

ggsave("figures/frip.png",
       width = 10,
       height = 7)
```

Generally want:

-   TSS enrichment > 1
-   FRiP > 0.2
-   Nucleosome signal < 4
-   Low percent mitochondrial reads
-   nCount_peaks - trim off outliers

Also:
You're going to have high PCR duplicate rates unless your sequencing depth is really shallow. Not a big deal. The number will give you an idea of how "rich" your library was.

High ATAC percent mito may indicate "dirty" nuclei and point toward issues with the nuclei isolation step.

```{r filter_bad_cells}
seurat_obj <-
    subset(seurat_obj,
           subset = nCount_peaks > 5000 &
                    nCount_peaks < 50000 &
                    pct_reads_in_peaks > 10 &
                    nucleosome_signal < 4 &
                    TSS.enrichment > 1 &
                    percent_mito < 10)
```
Now these should be higher quality cells

### Activity

#### Process your object through all the QC steps we ran above
Make sure you change your cutoffs for subsetting based on the plots made from your data.

```{r}
metadata1 <- read_csv(paste0(data_directory, "8k_mouse_cortex_ATACv2_nextgem_Chromium_Controller_singlecell.csv")) %>% filter(barcode != "NO_BARCODE") %>% column_to_rownames("barcode")

seurat_obj1 <- AddMetaData(object = seurat_obj1,
metadata = metadata1)

seurat_obj1$percent_mito <- seurat_obj1$mitochondrial / seurat_obj1$total * 100

annotations <-
    GetGRangesFromEnsDb(ensdb = EnsDb.Mmusculus.v79::EnsDb.Mmusculus.v79)

seqlevels(annotations)
seqlevels(annotations) <- paste0('chr', seqlevels(annotations))
genome(annotations) <- "mm10"

Annotation(seurat_obj1) <- annotations

seurat_obj1 <- NucleosomeSignal(seurat_obj1)
seurat_obj1 <- TSSEnrichment(seurat_obj1)

seurat_obj1$pct_reads_in_peaks <- seurat_obj1$peak_region_fragments / seurat_obj$passed_filters * 100

seurat_obj1@meta.data %>%
    ggplot(aes(x = nCount_peaks)) +
    geom_histogram(bins = 200) +
    geom_vline(xintercept = 5000, linetype = "dashed", color = "red") +
    geom_vline(xintercept = 45000, linetype = "dashed", color = "red") +
    labs(title = "Number of ATAC Fragments per Cell",
         x = "Number of ATAC fragments",
         y = "Number of cells")

seurat_obj1@meta.data %>%
    ggplot(aes(x = nucleosome_signal)) +
    geom_histogram(bins = 200) +
    geom_vline(xintercept = 1.3, linetype = "dashed", color = "red") +
    labs(title = "Nucleosome Signal",
         x = "Nucleosome signal",
         y = "Number of cells")

seurat_obj1@meta.data %>%
    ggplot(aes(x = TSS.enrichment)) +
    geom_histogram(bins = 200) +
    geom_vline(xintercept = 1, linetype = "dashed", color = "red") +
    labs(title = "TSS Enrichment",
         x = "TSS enrichment",
         y = "Number of cells")

seurat_obj1@meta.data %>%
    ggplot(aes(x = percent_mito)) +
    geom_histogram(bins = 200) +
    geom_vline(xintercept = 10, linetype = "dashed", color = "red") +
    labs(title = "Percent Mitochondrial Reads",
         x = "Percent mitochondrial reads",
         y = "Number of cells")  

seurat_obj@meta.data %>%
    ggplot(aes(x = pct_reads_in_peaks)) +
    geom_histogram(bins = 200) +
    geom_vline(xintercept = 20, linetype = "dashed", color = "red") +
    labs(title = "Percent Reads in Peaks",
         x = "Percent reads in peaks",
         y = "Number of cells")            
```

#### How many cells did you filter out?
```{r}
seurat_obj1 <-
    subset(seurat_obj1,
           subset = nCount_peaks > 5000 &
                    nCount_peaks < 50000 &
                    pct_reads_in_peaks > 10 &
                    nucleosome_signal < 4 &
                    TSS.enrichment > 1 &
                    percent_mito < 10)

seurat_obj1
```

#### Which peak has the highest average reads per cell?
```{r}

```

#### How many peaks found in the new data are also in the data in seurat_obj?
```{r}

```

## Process the seurat data
For ATAC, we do a couple of things differentially than GEX data.

- We don't use the standard normalization, we use term frequency-inverse document frequency (TF-IDF) instead
    - "This is a two-step normalization procedure, that both normalizes across cells to correct for differences in cellular sequencing depth, and across peaks to give higher values to more rare peaks."
- We don't run PCA
    - We run singular value decomposition (SVD) on the TD-IDF matrix generated by RunTDIDF()
    - "In linear algebra, the singular value decomposition (SVD) is a factorization of a real or complex matrix. It generalizes the eigendecomposition of a square normal matrix with an orthonormal eigenbasis to any m x n matrix." - Wikipedia
    - "The combined steps of TF-IDF followed by SVD are known as latent semantic indexing (LSI), and were first introduced for the analysis of scATAC-seq data by Cusanovich et al. 2015."
    - The reduction is named "lsi"

```{r}
seurat_obj <-
    seurat_obj %>%
    RunTFIDF() %>%
    FindTopFeatures(min.cutoff = "q0") %>% #keep everything
    RunSVD() %>%
    FindNeighbors(reduction = "lsi") %>%
    FindClusters(algorithm = 3) %>%
    RunUMAP(reduction = "lsi",
            dims = 2:30, # they say to skip dim 1, it correlates too strongly
            reduction.name = "umap_atac")

seurat_obj$ATAC_cluster <- Idents(seurat_obj)

DimPlot(seurat_obj,
        group.by = "ATAC_cluster",
        reduction = "umap_atac",
        label = TRUE)

qs::qsave(seurat_obj, paste0(data_directory,
                             "8k_mouse_cortex_ATACv2_nextgem_Chromium_X.qs"))
```

## Assigning cell types
Lets try assigning cell types to the clusters. We'll use a scRNA reference dataset to do this. We can't directly compare the ATAC and RNA datasets, so we'll begin by inferring gene activity in the ATAC data. Then we can use that as input for FindTransferAnchors() to find anchors between the two datasets.

I prepped the scRNAseq data in prep_rna_ref.qmd and saved the data to our shared directory as brain_rna/brain_rna.qs

## Load reference data
ref for atac data is not as easy to come by compared to RNA seq
easier if doing RNA seq or multi-omics paired
peaks for your data will be totally different from your data
infer genes through promoter activity - do we have a peak here or not? maybe yes/::: nonincremental

- first
- second
- third


:::
```{r load_ref_data}
ref_data <-
    qs::qread(paste0(data_directory,
                     "brain_rna/brain_rna.qs"))
```

## Infer gene activity
We need something common to use to compare the datasets. We'll infer gene activity based on the location of open chromatin in the ATAC data. This provides estimates of expression for each gene. We can then compare the gene activity in the ATAC data to the gene expression in the RNA data to find which cell types best match.

use RNA reference to annoate our "fake" RNA data derived from ATAC data
```{r gene_activity}
seurat_obj[["RNA"]] <-
    CreateAssayObject(counts = GeneActivity(seurat_obj))

seurat_obj <-
    NormalizeData(seurat_obj,
                  assay = "RNA",
                  normalization.method = 'LogNormalize',
                  scale.factor = median(seurat_obj$nCount_RNA))
DefaultAssay(seurat_obj) <- "RNA"
```

## Find commonalities between datasets
Puts the data into a common space to find anchors between the datasets.
"cca" in this context is canonical correlation analysis. It finds linear combinations of the variables in the two datasets that have maximal correlation with each other. This is useful for finding commonalities between datasets.
https://en.wikipedia.org/wiki/Canonical_correlation

scRNAseq from mouse brain compared to fake RNAseq data inferred from our ATAC data to see which match
```{r transfer_anchors}
anchors <-
    FindTransferAnchors(reference = ref_data,
                        query = seurat_obj,
                        reduction = "cca")
```

## Use the transfer data to annotate the ATAC data
Uses the shared space to move metadata from the reference dataset to the query dataset.

In this example we're taking the cell type labels from the RNA data and adding them to the ATAC data.
```{r transfer_data}
seurat_obj <-
    TransferData(anchorset = anchors,
                 refdata = ref_data$cell_type,
                 weight.reduction = seurat_obj[["lsi"]],
                 dims = 2:30) %>%
    AddMetaData(object = seurat_obj)
seurat_obj$rna_ref_cell_type <- seurat_obj$predicted.id

table(seurat_obj$rna_ref_cell_type) %>%
    sort()
```

## Plot the ATAC data with the RNA cell types
Lets look at which cell types we have in the ATAC data
```{r}
DimPlot(seurat_obj,
        group.by = "rna_ref_cell_type",
        label = TRUE,
        repel = TRUE)
ggsave("Sessions/adv_tuesday/figures/atac_rna_cell_types.png",
       width = 15,
       height = 10)
```

### Find differential accessibility between cell types
To test out looking at differential accessibility, lets look at the differences between different neuronal clusters.

We'll start by subsetting out the neurons and re-processing the data.
```{r}
DefaultAssay(seurat_obj) <- "peaks"
Idents(seurat_obj) <- "rna_ref_cell_type"

just_neurons <-
    seurat_obj %>%
    subset(rna_ref_cell_type == "neuron") %>%
    RunTFIDF() %>%
    FindTopFeatures(min.cutoff = "q0") %>%
    RunSVD() %>%
    FindNeighbors(reduction = "lsi") %>%
    FindClusters(algorithm = 3,
                 resolution = 0.2) %>%
    RunUMAP(reduction = "lsi",
            dims = 2:30,
            reduction.name = "umap_atac")

DimPlot(just_neurons,
        label = TRUE)
```

### Find differentially accessible peaks
We also add in annotation for nearest feature to each peak using the ClosestFeature() function.
```{r diff_peaks}
da_peaks <-
    FindAllMarkers(just_neurons,
                   test.use = "wilcox") %>%
    rownames_to_column("region") %>%
    left_join(ClosestFeature(just_neurons,
                             regions = .$region) %>%
        dplyr::rename(region = query_region))
```

# Plot ATAC peaks
Let's pick out some peaks to look at more specifically
```{r}
da_peaks %>%
    as_tibble() %>%
    select(region,
           avg_log2FC,
           pct.1,
           pct.2,
           p_val_adj,
           cluster,
           gene_name) %>%
    mutate(cluster = as.character(cluster) %>% as.numeric()) %>%
    filter(!is.na(gene_name) &
           pct.1 - pct.2 > 0.2 &
           cluster < 4) %>%
    distinct() %>%
    arrange(desc(avg_log2FC))

# Rgs14
CoveragePlot(just_neurons,
             region = "chr13-55371025-55371922",
             extend.upstream = 20000,
             extend.downstream = 20000)

# Reln
CoveragePlot(just_neurons,
             region = "Reln",
             extend.upstream = 20000,
             extend.downstream = 20000)
FeaturePlot(just_neurons, features = "chr13-55371025-55371922")

CoveragePlot(just_neurons,
             region.highlight = StringToGRanges("chr2-163208894-163209794"),
             region = "Tox2")

fav_peaks <-
    da_peaks %>%
    mutate(abs_logfc = abs(avg_log2FC)) %>%
    filter(p_val_adj < 1e-20 &
            abs_logfc > 0.5 &
            gene_biotype == "protein_coding" &
            distance == 0) %>%
    group_by(avg_log2FC > 0) %>%
    arrange(desc(abs_logfc)) %>%
    slice_head(n = 3) %>%
    pull(region)

fav_peaks
```

# What if I have more than one sample?

That makes things more complex.....

If you have multiple samples called with cellranger-arc, their peaks are different, so you can't compare them directly.
I'm not going to walk through this, due to time constraints, but just wanted to show a couple of options to deal with this.

You can either re-call the peaks: https://stuartlab.org/signac/articles/peak_calling.html

Or use windows: https://www.nature.com/articles/s41592-023-02139-9

Or redefine their boundaries: https://stuartlab.org/signac/articles/merging.html

https://github.com/kidcancerlab/rrrSingleCellUtils/blob/master/R/multiomics.R#L18

This code won't work since the files don't exist, it's just to show you how to use the function
```{r eval=FALSE}
# Documentation is still a work in progress
library(rrrSingleCellUtils)
data_path <- "/path/to/data/"
peak_beds <-
    paste0(data_path,
           c("sample_1/atac_peaks.bed",
             "sample_2/atac_peaks.bed",
             "sample_3/atac_peaks.bed"))

frag_paths <-
    paste0(data_path,
           c("sample_1/atac_fragments.tsv.gz",
             "sample_2/atac_fragments.tsv.gz",
             "sample_3/atac_fragments.tsv.gz"))

cell_ids <-
    c("sample_1",
      "sample_2",
      "sample_3")

# Uses {parallel} to run faster
merged_atac_data <-
    merge_atac(peak_beds = peak_beds,
               frag_paths = frag_paths,
               cell_ids = cell_ids,
               n_regions_simul = 100000,
               threads = 3) %>%
    subset(nCount_ATAC > 100)
```


## Motif analysis of peak sequence can potentially identify binding factors
```{r eval=FALSE}
freq_matrix <-
    TFBSTools::getMatrixSet(x = JASPAR2020::JASPAR2020,
                 opts = list(collection = "CORE",
                             tax_group = "vertebrates",
                             all_versions = FALSE))

# The chromosomes for this dataset are a bit goofy so we need to kick out a couple junk chromosomes
seurat_obj <-
    seurat_obj[grep("^GL|^JH", rownames(seurat_obj), invert = TRUE), ]

# add motif information
# Ignore the warning - our object just doesn't have some of the junk contigs
seurat_obj <-
    AddMotifs(object = seurat_obj,
              genome = BSgenome.Mmusculus.UCSC.mm10::BSgenome.Mmusculus.UCSC.mm10,
              pfm = freq_matrix)

Idents(seurat_obj) <- "cell_type"

diff_peaks <-
    FindMarkers(object = seurat_obj,
                ident.1 = "Neurons",
                ident.2 = "NPCs",
                only.pos = TRUE,
                test.use = "LR",
                min.pct = 0.1,
                latent.vars = "nCount_ATAC")

top_diff_peaks <-
    rownames(diff_peaks[diff_peaks$p_val < 0.005, ])

open_peaks <-
    AccessiblePeaks(seurat_obj,
                    idents = c("Neurons", "NPCs"))

# match the overall GC content in the peak set
meta_feature <-
    GetAssayData(seurat_obj,
                 assay = "ATAC",
                 slot = "meta.features")

peaks_matched <-
    MatchRegionStats(meta.feature = meta_feature[open_peaks, ],
                     query.feature = meta_feature[top_diff_peaks, ],
                     n = 50000)

## Matching GC.percent distribution

# test enrichment
enriched_motifs <-
    FindMotifs(object = seurat_obj,
               features = top_diff_peaks)

head(enriched_motifs)

motif_locs <-
    Motifs(seurat_obj)@positions %>%
    as.data.frame() %>%
    full_join(tibble(motif_name = Motifs(seurat_obj)@motif.names %>%
                        as.character(),
                     group_name = Motifs(seurat_obj)@motif.names %>%
                        names())) %>%
    as_tibble()

motif_locs
```

# Activity

Process your data through the remaining steps including cell type annotation, differential accessibility, and motif analysis.

```{r}


```